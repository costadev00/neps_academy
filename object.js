var user = {} // Criando objeto de usuÃ¡rio
//essa forma de declarar um objeto Ã© chamada de objeto literal(ou object literal notation)

// Todo usuÃ¡rio tem o que? Um nome, uma foto de perfil,
// uma bio, nÃºmero de exercÃ­cios resolvidos, etc...

user.name = "AntÃ´nio" // Criando uma propriedade 'name' e atribuindo o valor a ela
user.pathPicture = "image-antonio.png" // Propriedade que guarda o caminho da foto de perfil
user.bio = "I'm a programming enthusiast, without a specific niche, I like everything ğŸ˜„ğŸ˜„ğŸ˜„" // Propriedade da bio do perfil
user.numberSolvedExercises = 325 // NÃºmero de exercÃ­cios resolvidos

console.log(user);
/* 
SaÃ­da:
  {
    name: 'AntÃ´nio',
    pathPicture: 'image-antonio.png',
    bio: "I'm a programming enthusiast, without a specific niche, I like everything ğŸ˜„ğŸ˜„ğŸ˜„
    numberSolvedExercises: 325
  }
*/

// Outra forma de criaÃ§Ã£o de um objeto Ã© jÃ¡ atribuir as propriedades na criaÃ§Ã£o dele. Dessa forma, ao invÃ©s de definir inicialmente como vazio, dentro das 
// { }, Ã© colocado os atributos, separados por vÃ­rgula.
// Criando o objeto com as propriedades jÃ¡ estabelecidas
var user = {
    name: "AntÃ´nio", // Propriedade do nome do usuÃ¡rio
    pathPicture: "image-antonio.png", // Caminho o qual guarda a foto de perfil
    bio: "I'm a programming enthusiast, without a specific niche, I like everything ğŸ˜„ğŸ˜„ğŸ˜„", // Bio do perfil
    numberSolvedExercises: 325 // NÃºmero de exercÃ­cios resolvidos
  }
  

  // Criando a variÃ¡vel com a propriedade a ser lida
var property = "name";

// Verificando se a propriedade existe
if(user[property] !== undefined) {
  console.log("Exist!");
  // CÃ³digo da aplicaÃ§Ã£o
}


// Percorrendo todas as propriedades do objeto 'user'
for(let property in user)
  console.log(user[property]); // Imprimindo os atributos das propriedades

/*
SaÃ­da:
  AntÃ´nio
  image-antonio.png
  I'm a programming enthusiast, without a specific niche, I like everything ğŸ˜„ğŸ˜„ğŸ˜„
  325
*/

